from browser import document, window


########################################################################
class MDCObject:
    """"""

    #----------------------------------------------------------------------
    def __init__(self, mdc, element):
        """Constructor"""
        self.mdc = mdc
        self.element = element


    #----------------------------------------------------------------------
    @classmethod
    def __to_select__(self, selector):
        """"""
        #print(selector)
        if isinstance(selector, [list, tuple]):
            return " ".join(selector)

        elif isinstance(selector, [str, bytes]):
            selector = selector.strip()
            if selector.count(' ') > 0:
                return '.'.join(selector.split())
            return selector
        else:
            return self.__to_select__('.'+selector.class_name)



    #----------------------------------------------------------------------
    def show(self):
        """"""
        return self.mdc.show()


    #----------------------------------------------------------------------
    def open(self, *args, **kwargs):
        """"""
        try:
            self.mdc.open()
        except:
            self.mdc.open = True


    #----------------------------------------------------------------------
    def close(self, *args, **kwargs):
        """"""
        try:
            self.mdc.close()
        except:
            self.mdc.open = False


    #----------------------------------------------------------------------
    def toggle(self, *args, **kwargs):
        """"""
        self.mdc.open = not self.mdc.open


    #----------------------------------------------------------------------
    def add_item(self, item):
        """"""
        self.element.select(".mdc-simple-menu__items")[0] <= item


    #----------------------------------------------------------------------
    def set_title(self, text='', html=''):
        """"""
        if text:
            self.element.select('.mdc-toolbar__title')[0].text = text

        elif html:
            self.element.select('.mdc-toolbar__title')[0].html = html




########################################################################
class MDC:
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """"""
        self.MDC_ = {

            'MDCIconToggle':
                ('iconToggle', '.mdc-icon-toggle'),

            'MDCDialog':
                ('dialog', '.mdc-dialog'),

            #'MCDDialogWithList:MDCDialog':
                #('dialog', '.mdc-dialog'),

            'MDCPersistentDrawer':
                ('drawer', '.mdc-persistent-drawer'),

            'MDCTemporaryDrawer':
                ('drawer', '.mdc-temporary-drawer'),

            'MDCCheckbox':
                ('checkbox', '.mdc-checkbox'),

            'MDCRadio':
                ('radio', '.mdc-radio'),

            'MDCSimpleMenu':
                ('menu', '.mdc-simple-menu'),

            'MDCSelect':
                ('select', '.mdc-select'),

            'MDCSlider':
                ('slider', '.mdc-slider'),

            'MDCTextField':
                ('textField', '.mdc-text-field'),

            'MDCLinearProgress':
                ('linearProgress', '.mdc-linear-progress'),

            'MDCSnackbar':
                ('snackbar', '.mdc-snackbar'),

            #'MDCTab':
                #('tabs', '.mdc-tab'),

            'MDCTab':
                ('tabs', None),  #none meand that is not attachble

            'MDCTabBar':
                ('tabs', '.mdc-tab-bar'),

            'MDCTabBarScroller':
                ('tabs', '.mdc-tab-bar-scroller'),

            'MDCToolbar':
                ('toolbar', '.mdc-toolbar'),

        }

        #self.__attach__()


    #----------------------------------------------------------------------
    def attach(self):
        """"""
        for component in self.MDC_.keys():
            name, class_ = self.MDC_[component]

            if class_ is None:
                continue
            #if ":" in name:
                #continue

            #print(class_, document.select(class_))

            #for element in document.get(selector=class_):
            for element in document.select(class_):
                #print(name, component)
                getattr(getattr(window.mdc, name), component).attachTo(element)

        window.mdc.autoInit()


    #----------------------------------------------------------------------
    def __getattr__(self, component):
        """"""
        #if ':' in component:
            #component = component[component.find(':')+1:]
        if component in self.MDC_.keys() or 'MDC'+component in self.MDC_.keys():
            return lambda s: self.__mdc__(component, selector=s)


    #----------------------------------------------------------------------
    def __mdc__(self, component, selector=None, element=None):
        """"""

        if selector:
            selector = MDCObject.__to_select__(selector)
            element = document.querySelector(selector)
            #print(selector)

        if not component.startswith('MDC'):
            component = 'MDC'+component
        name, class_ = self.MDC_[component]


        if element:
            #return getattr(getattr(window.mdc, name), component).new(element)  #.foundation_
            return MDCObject(getattr(getattr(window.mdc, name), component).new(element), element)
            #return getattr(getattr(window.mdc, name), component).new(element)




    ##----------------------------------------------------------------------
    #def open(self, element):
        #""""""
        #element.open = True



#print("Initializing MDC elements...")
##MDC = MDC()
##MDC.attach()
#print("Finished.")