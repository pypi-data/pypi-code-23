from browser import document
from browser import html

from .mdc.core import htmlElement

#from .build import htmlElement
from mdc_attach import MDC

#########################################################################
#class htmlElement:
    #""""""

    ##----------------------------------------------------------------------
    #def __new__(self, element, cls=None):
        #""""""
        #self.cls = cls
        #element.__getattr__ = self.__getattr__
        #return element


    ##----------------------------------------------------------------------
    #def __getattr__(self, attr):
        #""""""
        ##print("oshdlfkghefkjh", attr)
        #name = self.getAttribute('mdc-name')

        #if attr is 'mdc':
            #return MDC.__mdc__(name, element=self)

        #elif attr is 'Foundation':
            #return MDC.__mdc__(name, element=self).mdc.foundation_

        #elif hasattr(self.cls, 'mdc_{}'.format(attr)):
            #return getattr(self.cls, 'mdc_{}'.format(attr))





########################################################################
class Template:
    """"""

    #----------------------------------------------------------------------
    def attach(self):
        """"""
        return MDC.attach()



    ##----------------------------------------------------------------------
    def __getattr__(self, attr):
        """"""
        if hasattr(html, attr):
            return getattr(html, attr)



    #----------------------------------------------------------------------
    def render(class_, **default_kwargs):
        """"""
        def decorator(comp):
            def wrapper(*args, **kwargs):
                code = comp.__doc__

                #comp

                name = comp.__name__

                from_args = dict(zip(default_kwargs.keys(), args[1:]))

                default_kwargs.update(kwargs)
                default_kwargs.update(from_args)

                if not 'style' in default_kwargs:
                    default_kwargs['style'] = {}

                class__ = "{} {}".format(class_, default_kwargs.get('class_', ''))

                parents = default_kwargs.get('parent', []) + ['style']

                if parents:
                    parent_kwargs = {parent:default_kwargs.pop(parent) for parent in parents}
                else:
                    parent_kwargs = {}

                attr = default_kwargs.get('attr', {})
                parent_kwargs.update(attr)

                e = comp()(code.format(**default_kwargs), Class=class__.format(**default_kwargs), **parent_kwargs)
                e.setAttribute('mdc-name', name)

                return e

            return wrapper
        return decorator


    #----------------------------------------------------------------------
    @render('mdc-toolbar', title='Title', menu_icon='menu')
    def Toolbar():
        """
        <div class="mdc-toolbar__row">
            <section class="mdc-toolbar__section mdc-toolbar__section--align-start">
                <a href="#" class="material-icons mdc-toolbar__menu-icon">{menu_icon}</a>
                <span class="mdc-toolbar__title" style="overflow: visible;">{title}</span>
            </section>


            <section class="mdc-toolbar__section mdc-toolbar__section--align-end" role="toolbar">
            </section>

            <div class="toolbar mdc-menu-anchor">
            </div>



        </div>
        """
        return htmlElement(html.HEADER)


    #----------------------------------------------------------------------
    @render("mdc-{mode}-drawer mdc-typography", mode='temporary')
    def Drawer():
        """
        <nav class="mdc-{mode}-drawer__drawer">
          <header class="mdc-{mode}-drawer__header">
            <div class="mdc-{mode}-drawer__header-content mdc-theme--primary-bg">

            </div>
          </header>
          <nav id="icon-with-text-demo" class="mdc-{mode}-drawer__content mdc-list">

          </nav>
        </nav>
        """
        return htmlElement(html.ASIDE)


    #----------------------------------------------------------------------
    @render("mdc-{mode}-drawer mdc-typography", mode='temporary')
    def TemporaryDrawer():
        """
        <nav class="mdc-{mode}-drawer__drawer">
          <header class="mdc-{mode}-drawer__header">
            <div class="mdc-{mode}-drawer__header-content mdc-theme--primary-bg">

            </div>
          </header>
          <nav id="icon-with-text-demo" class="mdc-{mode}-drawer__content mdc-list">

          </nav>
        </nav>
        """
        return htmlElement(html.ASIDE)


    #----------------------------------------------------------------------
    @render("mdc-{mode}-drawer mdc-typography", mode='persistent')
    def PersistentDrawer():
        """
        <nav class="mdc-{mode}-drawer__drawer">
          <header class="mdc-{mode}-drawer__header">
            <div class="mdc-{mode}-drawer__header-content mdc-theme--primary-bg">

            </div>
          </header>
          <nav id="icon-with-text-demo" class="mdc-{mode}-drawer__content mdc-list">

          </nav>
        </nav>
        """
        return htmlElement(html.ASIDE)


    #----------------------------------------------------------------------
    @render("mdc-{mode}-drawer mdc-typography", mode='permanent')
    def PermanentDrawer():
        """
        <nav class="mdc-{mode}-drawer__drawer">
          <header class="mdc-{mode}-drawer__header">
            <div class="mdc-{mode}-drawer__header-content mdc-theme--primary-bg">

            </div>
          </header>
          <nav id="icon-with-text-demo" class="mdc-{mode}-drawer__content mdc-list">

          </nav>
        </nav>
        """
        return htmlElement(html.ASIDE)


    #----------------------------------------------------------------------
    @render("mdc-list-item", text='test', icon='menu', href="#", parent=['href'], attr={})
    def ListItem():
        """
        <i class="material-icons mdc-list-item__start-detail" aria-hidden="true">{icon}</i>{text}
        """
        return html.LI


    #----------------------------------------------------------------------
    @render("mdc-list-item", text='test', secondary="secondary", attr={})
    def ListItemSecondary():
        """
          <span class="mdc-list-item__text">
            {text}
            <span class="mdc-list-item__text__secondary">{secondary}</span>
          </span>
        """
        return html.LI


    ##----------------------------------------------------------------------
    #@render("mdc-list-item__end-detail", icon='favorite', href="#", parent=['href'], attr={})
    #def ListEndDetail():
        #"""
        #<i class="mdc-list-item__end-detail material-icons" aria-hidden="true">{icon}</i>
        #"""
        #return html.SPAN




    #----------------------------------------------------------------------
    @render("mdc-list-item", text='test', role="menuitem", parent=['role'])
    def MenuItem():
        """
        {text}
        """
        return htmlElement(html.LI)


    #----------------------------------------------------------------------
    @render("mdc-list-divider", role="separator", parent=['role'])
    def MenuItemDivider():
        """
        """
        return htmlElement(html.LI)


    #----------------------------------------------------------------------
    @render("mdc-simple-menu")
    def SimpleMenu():
        """
        <ul class="mdc-simple-menu__items mdc-list" role="menu" aria-hidden="true">
        </ul>
        """
        return htmlElement(html.DIV)


    #----------------------------------------------------------------------
    @render("mdc-button", text='Button')
    def Button():
        """
        {text}
        """
        return htmlElement(html.BUTTON)


    #----------------------------------------------------------------------
    @render("mdc-button", text='Button', icon='favorite')
    def ButtonIcon():
        """
        <i class="material-icons mdc-button__icon">{icon}</i>
        {text}
        """
        return htmlElement(html.BUTTON)


    #----------------------------------------------------------------------
    @render("material-icons mdc-button__icon", icon='favorite')
    def Icon():
        """
        {icon}
        """
        return htmlElement(html.I)


    #----------------------------------------------------------------------
    @render("mdc-fab material-icons", icon='favorite')
    def ButtonFab():
        """
        <span class="mdc-fab__icon">
            {icon}
        </span>
        """
        return htmlElement(html.BUTTON)


    #----------------------------------------------------------------------
    @render("mdc-layout-grid")
    def Grid():
        """
        <div class="mdc-layout-grid__inner">
        </div>
        """
        return htmlElement(html.DIV)


    #----------------------------------------------------------------------
    @render("mdc-layout-grid__cell")
    def Cell(html):
        """
        """
        return htmlElement(html.DIV)


    #----------------------------------------------------------------------
    @render("mdc-dialog", title='', body_class="", cancel='Decline', accept='Accept', attr={'role': 'alertdialog',})
    def Dialog():
        """
        <div class="mdc-dialog__surface">
          <header class="mdc-dialog__header">
            <h2 class="mdc-dialog__header__title">
              {title}
            </h2>
          </header>
          <section class="mdc-dialog__body {body_class}">
          </section>
          <footer class="mdc-dialog__footer">
            <button type="button" class="mdc-button mdc-dialog__footer__button mdc-dialog__footer__button--cancel">{cancel}</button>
            <button type="button" class="mdc-button mdc-dialog__footer__button mdc-dialog__footer__button--accept">{accept}</button>
          </footer>
        </div>
        <div class="mdc-dialog__backdrop"></div>
        """
        return htmlElement(html.ASIDE)



    #----------------------------------------------------------------------
    @render("mdc-text-field", value="")
    def TextField():
        """
        <input type="text" id="pre-filled" class="mdc-text-field__input" value="{value}">
        <div class="mdc-text-field__bottom-line"></div>
        """

        return htmlElement(html.DIV)


