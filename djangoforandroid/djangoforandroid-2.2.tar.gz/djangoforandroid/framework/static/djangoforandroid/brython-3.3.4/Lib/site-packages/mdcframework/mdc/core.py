from mdc_attach import MDC


########################################################################
class htmlElement:
    """"""

    #----------------------------------------------------------------------
    def __new__(self, element, cls=None):
        """"""
        self.cls = cls
        element.__getattr__ = self.__getattr__
        return element


    #----------------------------------------------------------------------
    def __getattr__(self, attr):
        """"""
        #print("oshdlfkghefkjh", attr)
        name = self.getAttribute('mdc-name')

        if attr is 'mdc':
            return MDC.__mdc__(name, element=self)

        elif attr is 'Foundation':
            return MDC.__mdc__(name, element=self).mdc.foundation_

        elif hasattr(self.cls, 'mdc_{}'.format(attr)):
            return getattr(self.cls, 'mdc_{}'.format(attr))





########################################################################
class MDCTemplate():
    """"""

    def __init_mdc__(html, secondary=False, **kwargs):
        """Constructor"""
        if secondary:
            html.class_name += ' mdc-theme--secondary'


    #----------------------------------------------------------------------
    def __getattr__(self, attr):
        """"""
        #print("ljahdfkjahks")
        name = self.getAttribute('mdc-name')

        if attr is 'mdc':
            return MDC.__mdc__(name, element=self)

        elif attr is 'Foundation':
            return MDC.__mdc__(name, element=self).mdc.foundation_

        elif hasattr(self, 'mdc_{}'.format(attr)):
            return getattr(self, 'mdc_{}'.format(attr))



    #----------------------------------------------------------------------
    @classmethod
    def render(cls, args, kwargs):
        """"""

        context = args.copy()
        context.pop('self')
        context.pop('kwargs')

        html_inset = cls.__html__(**context)
        cls.__init_mdc__(html_inset, **kwargs)

        return htmlElement(html_inset, cls)



    #----------------------------------------------------------------------
    @classmethod
    def render_html(cls, code, context):
        """"""
        code = code.format(**context)
        return html.DIV(code).children[0]

