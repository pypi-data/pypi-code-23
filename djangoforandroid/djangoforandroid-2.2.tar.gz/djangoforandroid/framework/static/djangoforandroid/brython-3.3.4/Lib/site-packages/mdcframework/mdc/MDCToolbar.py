from .core import MDCTemplate

########################################################################
class MDCToolbar(MDCTemplate):
    """"""

    #----------------------------------------------------------------------
    def __new__(self, title, menu_icon='menu', fixed=False, **kwargs):
        """"""
        self.element = self.render(locals(), kwargs)
        #self.element.__getattr__ = MDCTemplate.__getattr__
        return self.element



    #----------------------------------------------------------------------
    @classmethod
    def __html__(cls, **context):
        """"""
        if context['fixed']:
            context['cls'] = 'mdc-toolbar--fixed'

        else:
            context['cls'] = ''

        code = """
        <header class="mdc-toolbar {cls}">
            <div class="mdc-toolbar__row">
                <section class="mdc-toolbar__section mdc-toolbar__section--align-start">
                    <a href="#" class="material-icons mdc-toolbar__menu-icon">{menu_icon}</a>
                    <span class="mdc-toolbar__title" style="overflow: visible;">{title}</span>
                </section>

                <section class="mdc-toolbar__section mdc-toolbar__section--align-end" role="toolbar">




                </section>



                <div class="toolbar mdc-menu-anchor">
                </div>

            </div>
        </header>
        """

        return cls.render_html(code, context)


    #----------------------------------------------------------------------
    def mdc_icon(self):
        """"""
        return self.mdc_toolbar.select('.mdc-toolbar__menu-icon')[0]


